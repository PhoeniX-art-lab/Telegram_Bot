import config
import telebot
from pyowm import OWM
import pyowm
from telebot import types
import schedule
from threading import Thread
import time

owm = OWM('')   # your OWM token

places = ['–ú–æ–≥–∏–ª—ë–≤', '–ú–∏–Ω—Å–∫', '–ú–æ—Å–∫–≤–∞', '–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥']
place = ""
temp = ""
w = ""
i = -1
words_list = []
flag = 0
permission = 0
favourite_time = '12:38'

bot = telebot.TeleBot(config.TOKEN)
id1 = None


def board():
    global markup
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("–ü—Ä–∏–≤–µ—Ç!üñê")
    item2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞üå§")
    item3 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    item4 = types.KeyboardButton("–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüîî")

    markup.add(item1, item2, item3, item4)


@bot.message_handler(commands=['start', 'help'])
def starting_dialog(message):
    # keyboard
    board()

    bot.send_message(message.chat.id,
                     "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n–Ø - <b>{1.first_name}</b>, –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫–∞–∂–µ—Ç "
                     "—Ç–µ–±–µ –ø–æ–≥–æ–¥—É –≤ –ª—é–±–æ–º –≥–æ—Ä–æ–¥–µ.".format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)
    global id1  # –∏–¥–µ—è —Å —Ä–∞—Å—Å—ã–ª–∫–æ–π –ø–æ–≥–æ–¥—ã –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    # bot.send_message(id1, id1)


@bot.message_handler(content_types=["text"])
def weather_forecast_func(message):
    global i
    if message.text == '–ü—Ä–∏–≤–µ—Ç!üñê':
        bot.send_message(message.from_user.id, '–ü—Ä–∏–≤–µ—Ç!')

    elif message.text == '–ü–æ–≥–æ–¥–∞üå§':
        # temp keyboard
        markup1 = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
        item1_def = types.KeyboardButton(places[0])
        item2_def = types.KeyboardButton(places[1])
        item3_def = types.KeyboardButton(places[2])
        item4_def = types.KeyboardButton(places[3])
        markup1.add(item1_def, item2_def, item3_def, item4_def)

        bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥', reply_markup=markup1)
        bot.register_next_step_handler(message, placy)

    elif message.text.lower() == '–æ–∫':
        bot.send_message(message.from_user.id, '–ù—É –æ–∫, —Ç–∞–∫ –æ–∫')

    elif message.text == '–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô':
        i = -1
        # keyboard
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°")
        item2 = types.KeyboardButton("–ù–∞–∑–∞–¥‚¨Ö")

        markup.add(item1, item2)

        bot.send_message(message.from_user.id, '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–æ—Ä–æ–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –Ω–∏–º',
                         reply_markup=markup)
        bot.register_next_step_handler(message, switch)

    elif message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—èüîî':
        # keyboard
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°")
        item2 = types.KeyboardButton("–ù–∞–∑–∞–¥‚¨Ö")

        markup.add(item1, item2)

        bot.send_message(message.from_user.id, '–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ '
                                               '–≤—Ä–µ–º—è –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ',
                         reply_markup=markup)
        bot.register_next_step_handler(message, switch_notifications)

    else:
        bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã')


def switch_notifications(message):
    global id1, markup
    # keyboard
    board()

    if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°':
        bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É')
        id1 = message.from_user.id  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º id —é–∑–µ—Ä–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –∏ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞
        bot.register_next_step_handler(message, switch_notifications_city)
    elif message.text == '–ù–∞–∑–∞–¥‚¨Ö':
        bot.send_message(message.from_user.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)
    else:
        bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã', reply_markup=markup)


def switch_notifications_city(message):
    global favourite_place, markup
    # keyboard
    board()

    favourite_place = message.text
    # –ø—Ä–æ–≤–µ—Ä–∫–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥?
    try:
        mgr = owm.weather_manager()
        observation = mgr.weather_at_place(favourite_place)
    except pyowm.commons.exceptions.NotFoundError:
        for letter in favourite_place:
            try:
                if letter == '–µ':
                    favourite_place = favourite_place.replace('–µ', '—ë', 1)
                    mgr = owm.weather_manager()
                    observation = mgr.weather_at_place(favourite_place)
                    bot.send_message(message.from_user.id, f'–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É {favourite_place}')
                    bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                                           '"—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"')
                    bot.register_next_step_handler(message, switch_notifications_time)
                    return
            except pyowm.commons.exceptions.NotFoundError:
                bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥', reply_markup=markup)
                return
        bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥', reply_markup=markup)
        return
    bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è, –≤ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –ø–æ–≥–æ–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ '
                                           '"—á–∞—Å—ã:–º–∏–Ω—É—Ç—ã"')
    bot.register_next_step_handler(message, switch_notifications_time)


def switch_notifications_time(message):
    global favourite_time, markup, permission
    # keyboard
    board()

    favourite_time = message.text
    permission = 1


def placy(message):
    try:
        # keyboard
        board()

        global place
        global temp, w, flag
        place = message.text
        # bot.send_message(message.from_user.id, place)
        try:
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(place)
            w = observation.weather

            temp = w.temperature('celsius')["temp"]
            bot.send_message(message.from_user.id, f'–í –≥–æ—Ä–æ–¥–µ {place} —Å–µ–π—á–∞—Å {temp} –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –¶–µ–ª—å—Å–∏—é',
                             reply_markup=markup)
            bot.send_message(message.from_user.id, f'–í –≥–æ—Ä–æ–¥–µ {place} —Å–µ–π—á–∞—Å {w.detailed_status}')
        except pyowm.commons.exceptions.NotFoundError:
            flag = 0
            for j in place:
                try:
                    if j == '–µ':
                        flag = 1
                        place = place.replace('–µ', '—ë', 1)

                        mgr = owm.weather_manager()
                        observation = mgr.weather_at_place(place)
                        w = observation.weather

                        temp = w.temperature('celsius')["temp"]
                        bot.send_message(message.from_user.id, f'–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É {place}')
                        bot.send_message(message.from_user.id, f'–í –≥–æ—Ä–æ–¥–µ {place} —Å–µ–π—á–∞—Å {temp} –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –¶–µ–ª—å—Å–∏—é',
                                         reply_markup=markup)
                        bot.send_message(message.from_user.id, f'–í –≥–æ—Ä–æ–¥–µ {place} —Å–µ–π—á–∞—Å {w.detailed_status}')
                except pyowm.commons.exceptions.NotFoundError:
                    bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞üò≠', reply_markup=markup)
            if flag == 0:
                bot.send_message(message.from_user.id, '–Ø –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞üò≠', reply_markup=markup)
    except:
        bot.reply_to(message, 'ooops!!\n –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ "/help"')


def switch(message):
    try:
        global i, markup
        if message.text == '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚û°':
            i += 1
            bot.send_message(message.from_user.id, f'–í–≤–µ–¥–∏—Ç–µ {i + 1} –≥–æ—Ä–æ–¥')
            bot.register_next_step_handler(message, settings)
        elif message.text == '–ù–∞–∑–∞–¥‚¨Ö':
            # keyboard
            board()
            bot.send_message(message.from_user.id, '–í—ã –≤—ã—à–ª–∏ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫', reply_markup=markup)
        else:
            # keyboard
            board()
            bot.send_message(message.from_user.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞!', reply_markup=markup)
    except:
        bot.reply_to(message, 'ooops!!\n –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ "/help"')


def settings(message):
    try:
        global i, markup
        # keyboard
        board()

        temporary = message.text
        try:
            mgr = owm.weather_manager()
            observation = mgr.weather_at_place(temporary)
        except pyowm.commons.exceptions.NotFoundError:
            for j in temporary:
                try:
                    if j == '–µ':
                        temporary = temporary.replace('–µ', '—ë', 1)
                        mgr = owm.weather_manager()
                        observation = mgr.weather_at_place(temporary)
                        places[i] = temporary
                        bot.send_message(message.from_user.id, '–ü—Ä–∏–Ω—è—Ç–æ')
                        bot.send_message(message.from_user.id, f'{places[i]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤')
                        if i == 3:
                            bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É',
                                             reply_markup=markup)
                            return
                        bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')
                        bot.register_next_step_handler(message, switch)
                        return
                except pyowm.commons.exceptions.NotFoundError:
                    bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥', reply_markup=markup)
                    return
            bot.send_message(message.from_user.id, '–í—ã –≤–≤–µ–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –≥–æ—Ä–æ–¥', reply_markup=markup)
            return
        places[i] = temporary
        bot.send_message(message.from_user.id, '–ü—Ä–∏–Ω—è—Ç–æ', reply_markup=None)
        bot.send_message(message.from_user.id, f'{places[i]} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –≥–æ—Ä–æ–¥–æ–≤')
        if i == 3:
            # keyboard
            board()

            bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫—É', reply_markup=markup)
            return
        bot.send_message(message.from_user.id, '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?')
        bot.register_next_step_handler(message, switch)
    except:
        bot.reply_to(message, 'ooops!!\n –í–æ–∑–Ω–∏–∫–ª–∞ –∫–∞–∫–∞—è-—Ç–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ "/help"')


def planing_message():
    global favourite_place

    mgr = owm.weather_manager()
    observation = mgr.weather_at_place(favourite_place)
    w = observation.weather
    temp = w.temperature('celsius')["temp"]
    bot.send_message(id1, f'–í –≥–æ—Ä–æ–¥–µ {favourite_place} —Å–µ–π—á–∞—Å {temp} –≥—Ä–∞–¥—É—Å–æ–≤ –ø–æ –¶–µ–ª—å—Å–∏—é')
    bot.send_message(id1, f'–í –≥–æ—Ä–æ–¥–µ {favourite_place} —Å–µ–π—á–∞—Å {w.detailed_status}')


# RUN
def do_schedule():
    global markup
    # keyboard
    board()

    global permission
    try:
        schedule.every().day.at(favourite_time).do(planing_message)
        if permission == 2:
            bot.send_message(id1, '–í—ã —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', reply_markup=markup)
    except schedule.ScheduleValueError:
        bot.send_message(id1, '–ù–µ –≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!', reply_markup=markup)

    while True:
        schedule.run_pending()
        time.sleep(1)
        if permission == 1:
            permission = 2
            break
    do_schedule()


def main_loop():
    thread = Thread(target=do_schedule)
    thread.start()

    bot.polling(True)


if __name__ == '__main__':
    try:
        main_loop()
    except:
        main_loop()
